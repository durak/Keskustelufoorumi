//        Kayttaja kayttaja = new Kayttaja("KumiJ");
//        Alue alue = new Alue(1, "Yleinen keskustelu", 0, null);
//        Lanka lanka = new Lanka(1, "Timantit on ikuisia", alue, 0, null);
//        Date date = new Date();
//        Viesti viesti = new Viesti(1, "tadaa-tadaa", kayttaja, lanka, new Timestamp(date.getTime()));
//        
//        lanka.lisaaViesti(viesti);
//        alue.lisaaViesti(viesti);
//        
//        DaoManager dm = new DaoManager();
//        dm.teePaivitys(viesti);


//        Database database = new Database("jdbc:sqlite:forum2.db");
//        KayttajaDao kayttajaDao = new KayttajaDao(database);
//        AlueDao alueDao = new AlueDao(database);
//        LankaDao lankaDao = new LankaDao(database, alueDao);
//        ViestiDao viestiDao = new ViestiDao(database, kayttajaDao, lankaDao);
//        Scanner lukija = new Scanner(System.in);
        
//        Kayttaja uusi = new Kayttaja("KumiJ");
//        kayttajaDao.insertNewKayttaja(uusi);
//        tulostaKayttajat(kayttajaDao);
//        
//        Alue alue = new Alue(1, "testialue", 0);
//        Lanka lanka = new Lanka(1, "testilanka", alue, 0);
//        lankaDao.insertNewLanka(lanka);
//        
        
//        tulostaKayttajat(kayttajaDao);
//        tulostaAlueet(alueDao);
//        tulostaLangat(lankaDao);
//        tulostaViesti(viestiDao);

//        AlueDao aluedao = daoManager.getAlueDao();
//        List<Alue> alueet = aluedao.findAll();
//        System.out.println(alueet);
//        
//        LankaDao lankadao = daoManager.getLankaDao();
//        List<Lanka> langat = lankadao.findAll();
//        System.out.println(langat);
//        

//    public static void tulostaKayttajat(KayttajaDao kayttajaDao) throws SQLException {
//        System.out.println("Käyttäjät:");
//        for (Kayttaja kayttaja : kayttajaDao.findAll()) {
//            System.out.println(kayttaja.getId());
//        }
//        System.out.println("");
//    }
//
//    public static void tulostaAlueet(AlueDao alueDao) throws SQLException {
//        System.out.println("Alueet:");
//        for (Alue alue : alueDao.findAll()) {
//            System.out.println(alue.getAluenimi() + " | " + alue.getAlueviestimaara());
//        }
//        System.out.println("");
//    }
//
//    public static void tulostaLangat(LankaDao lankaDao) throws SQLException {
//        System.out.println("Langat:");
//        for (Lanka lanka : lankaDao.findAll()) {
//            System.out.println(lanka.getAlue().getAluenimi() + " | " + lanka.getLankanimi() + " | " + lanka.getLankaviestimaara());
//        }
//        System.out.println("");
//    }
//
//    public static void tulostaViesti(ViestiDao viestiDao) throws SQLException {
//        System.out.println("Viestit:");
//        for (Viesti viesti : viestiDao.findAll()) {
//            if (viesti.getLanka().getLankanimi().equals("UCL finaali")) {
//                System.out.println(viesti.getId()
//                        + " | " + viesti.getLanka().getLankanimi()
//                        + " | " + viesti.getKayttaja().getId()
//                        + " | " + viesti.getSisalto()
//                        + " | " + viesti.getLahetysaika());
//            }
//        }
//        System.out.println("");
//    }


        /*
         * Alueen langat
         */
//        get("/alue/:id", (req, res) -> {
//            AlueDao alueDao = daoManager.getAlueDao();
//            LankaDao lankaDao = daoManager.getLankaDao();
//
//            HashMap map = new HashMap<>();
//            map.put("alue", alueDao.findOne(Integer.parseInt(req.params("id"))));
//            map.put("langat", lankaDao.findAllWithAlueId(Integer.parseInt(req.params("id"))));
//
//            return new ModelAndView(map, "alueTable");
//        }, new ThymeleafTemplateEngine());
        /*
         *
         * Alueen langat 10 kerrallaan
         */


            <!--
                    <ul class="messages">            
                        <li th:each="alue: ${alueet}">                
                            <a th:href="${'/alue/' + alue.id + '?sivu=0'}"><span th:text="${alue.aluenimi}"></span></a>
                            <span th:text="${alue.alueviestimaara}"></span>
                            <span th:text="${alue.viimeisinAika}"></span>        
        
                        </li>
                    </ul>
            -->


            <!--
            <table style ="width:95%">

                <tr>
                    <th>Nimimerkki</th>
                    <th>Viesti</th>
                    <th>Lähetysaika</th>
                </tr>
                <tr th:each="viesti: ${viestit}">
                    <td>
                        <a th:href="${'/kayttaja/' + viesti.kayttaja.id}">
                            <span th:text="${viesti.kayttaja.id}"></span>
                        </a>
                    </td>
                    <td th:text="${viesti.sisalto}"></td>
                    <td th:text="${viesti.lahetysaika}"></td>       
                </tr>
            </table>

            -->

            <!--
            <h1>
                <span th:text="${alue.aluenimi}"></span>
                <span> / </span>
                <span th:text="${lanka.lankanimi}"></span>
            </h1>
            -->

<a th:href="${'/alue/' + alue.id + '/' + lanka.id + '?sivu=' + edellinen}"><span th:text="${edellinen != null} ? 'edelliset'">edelliset viestit</span></a>
<a th:href="${'/alue/' + alue.id + '/' + lanka.id + '?sivu=' + seuraava}"><span th:text="${seuraava != null} ? 'seuraavat'">seuraavat viestit</span></a>

            <p class="right">
                <a th:href="${'/alue/' + alue.id + '?sivu=' + edellinen}"><span th:text="${edellinen != null} ? 'edelliset'">edelliset langat</span></a>
                <a th:href="${'/alue/' + alue.id + '?sivu=' + seuraava}"><span th:text="${seuraava != null} ? 'seuraavat'">seuraavat langat</span></a>
            </p>


package keskustelufoorumi.database;

import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;

public class DatabaseSingleton_EI_KAYTOSSA {

    private String databaseAddress = "jdbc:sqlite:forum.db";
    private static DatabaseSingleton_EI_KAYTOSSA instance = new DatabaseSingleton_EI_KAYTOSSA();
    private Connection connection;

    private DatabaseSingleton_EI_KAYTOSSA() {
    }

    public static DatabaseSingleton_EI_KAYTOSSA getInstance() {
        return instance;
    }

//    public Database(String databaseAddress) throws ClassNotFoundException {
//        this.databaseAddress = databaseAddress;
//    }
    public Connection getConnection() throws SQLException {
        if (connection == null) {
            try {
                connection = DriverManager.getConnection(databaseAddress);
            } catch (SQLException ex) {
                Logger.getLogger(DaoManager.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return this.connection;
    }
    
    private Connection getTxConnection() {
        try {
            getConnection().setAutoCommit(false);
        } catch (SQLException ex) {
            Logger.getLogger(DaoManager.class.getName()).log(Level.SEVERE, null, ex);
        }

        return this.connection;
    }
}



//    public Database() throws ClassNotFoundException {
//        this.databaseAddress = "jdbc:sqlite:forum.db";
//    }

// toimiva plain luokka = konstruktori plus alla oleva metodi    
//    public Connection getConnection() throws SQLException {
//        return DriverManager.getConnection(databaseAddress);
//    }


    /*
    Multi-Dao transaktiot
     */
//    public void teePaivitys(Viesti viesti) throws SQLException {
//
//        try {
//
//            getConnection().setAutoCommit(false);
//
//            Kayttaja kayttaja = viesti.getKayttaja();
//            Lanka lanka = viesti.getLanka();
//            Alue alue = lanka.getAlue();
//
//            // uusi käyttäjä
//            if (getKayttajaDao().findOne(kayttaja.getId()) == null) {
//                getKayttajaDao().insertNewKayttaja(kayttaja);
//            }
//
//            // uusi alue / paivitys
//            if (getAlueDao().findOne(alue.getId()) == null) {
//                getAlueDao().insertNewAlue(alue);
//            } else {
//                getAlueDao().updateAlue(alue);
//            }
//            
//            // uusi lanka / päivitys
//            if (getLankaDao().findOne(lanka.getId()) == null) {
//                getLankaDao().insertNewLanka(lanka);
//            } else {
//                getLankaDao().updateLanka(lanka);
//            }
//
//            getViestiDao().insertNewViesti(viesti);
//
//            this.connection.commit();
//
//        } catch (Exception e) {
//            if (this.connection != null) {
//                this.connection.rollback();
//            }
//        } finally {
//            if (this.connection != null) {
//                this.connection.setAutoCommit(true);
//                this.connection.close();
//
//            }
//
//        }

//    }

    /*
    YHTEYDENPITO TIETOKANTAAN
     */
    private Connection getConnection() throws SQLException {
        if (this.connection == null) {
            this.connection = database.getConnection();
        }

        return this.connection;
    }

    private Connection getTxConnection() {
        try {
            getConnection().setAutoCommit(false);
        } catch (SQLException ex) {
            Logger.getLogger(DaoManager.class.getName()).log(Level.SEVERE, null, ex);
        }

        return this.connection;
    }

    public void closeConnection() throws SQLException {
        this.connection.close();
    }


//    public List<Lanka> findAllWithAlueId(Integer key) throws SQLException {
//        Connection connection = database.getConnection();
//        String query = "SELECT * FROM Lanka WHERE alue_id = ?";
//        PreparedStatement stmt = connection.prepareStatement(query);
//        stmt.setObject(1, key);
//        
//        ResultSet rs = stmt.executeQuery();
//        List<Lanka> langat = new ArrayList<>();
//
//        while (rs.next()) {
//            int id = rs.getInt("id");
//            String lankanimi = rs.getString("lankanimi");
//            int lankaviestimaara = rs.getInt("lankaviestimaara");
//            int alueId = rs.getInt("alue_id");
//            Timestamp viimeisinAika = rs.getTimestamp("viimeisin_aika");
//            langat.add(new Lanka(id, lankanimi, alueDao.findOne(alueId), lankaviestimaara, viimeisinAika));
//        }
//
//        rs.close();
//        stmt.close();
//        connection.close();
//
//        return langat;
//    }
    /*
     * järjestetty ja limitoitu versio
     */


    public void insertNewAlue(Alue alue) throws SQLException {
        String updateQuery = "INSERT INTO Alue (aluenimi, alueviestimaara, viimeisin_aika) VALUES (?, ?, ?);";
        Object[] params = {alue.getAluenimi(), alue.getAlueviestimaara(), alue.getViimeisinAika()};
        update(updateQuery, params);
    }

    public void updateAlue(Alue alue) throws SQLException {
        String updateQuery = "UPDATE Alue SET alueviestimaara = ?, viimeisin_aika = ? WHERE id = ?;";
        Object[] params = {alue.getAlueviestimaara(), alue.getViimeisinAika(), alue.getId()};
        update(updateQuery, params);
    }

    public void insertNewKayttaja(Kayttaja kayttaja) throws SQLException {
        String updateQuery = "INSERT INTO Kayttaja VALUES (?);";
        String[] params = {kayttaja.getId()};
        update(updateQuery, params);
    }

    public void insertNewLanka(Lanka lanka) throws SQLException {
        String updateQuery = "INSERT INTO Lanka (lankanimi, alue_id, lankaviestimaara, viimeisin_aika) VALUES (?, ?, ?, ?);";
        Object[] params = {lanka.getLankanimi(), lanka.getAlue().getId(), lanka.getLankaviestimaara(), lanka.getViimeisinAika()};
        update(updateQuery, params);
    }

    public void updateLanka(Lanka lanka) throws SQLException {
        String updateQuery = "UPDATE Lanka SET lankaviestimaara = ?, viimeisin_aika = ? WHERE id = ?;";
        Object[] params = {lanka.getLankaviestimaara(), lanka.getViimeisinAika(), lanka.getId()};
        update(updateQuery, params);
    }

    public void insertNewViesti(Viesti viesti) throws SQLException {
        String updateQuery = "INSERT INTO Viesti (sisalto, kayttaja_id, lanka_id, lahetysaika) VALUES (?, ?, ?, ?);";
        Object[] params = {viesti.getSisalto(), viesti.getKayttaja().getId(), viesti.getLanka().getId(), viesti.getLahetysaika()};
        update(updateQuery, params);
    }
