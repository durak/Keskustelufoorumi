//        Kayttaja kayttaja = new Kayttaja("KumiJ");
//        Alue alue = new Alue(1, "Yleinen keskustelu", 0, null);
//        Lanka lanka = new Lanka(1, "Timantit on ikuisia", alue, 0, null);
//        Date date = new Date();
//        Viesti viesti = new Viesti(1, "tadaa-tadaa", kayttaja, lanka, new Timestamp(date.getTime()));
//        
//        lanka.lisaaViesti(viesti);
//        alue.lisaaViesti(viesti);
//        
//        DaoManager dm = new DaoManager();
//        dm.teePaivitys(viesti);


//        Database database = new Database("jdbc:sqlite:forum2.db");
//        KayttajaDao kayttajaDao = new KayttajaDao(database);
//        AlueDao alueDao = new AlueDao(database);
//        LankaDao lankaDao = new LankaDao(database, alueDao);
//        ViestiDao viestiDao = new ViestiDao(database, kayttajaDao, lankaDao);
//        Scanner lukija = new Scanner(System.in);
        
//        Kayttaja uusi = new Kayttaja("KumiJ");
//        kayttajaDao.insertNewKayttaja(uusi);
//        tulostaKayttajat(kayttajaDao);
//        
//        Alue alue = new Alue(1, "testialue", 0);
//        Lanka lanka = new Lanka(1, "testilanka", alue, 0);
//        lankaDao.insertNewLanka(lanka);
//        
        
//        tulostaKayttajat(kayttajaDao);
//        tulostaAlueet(alueDao);
//        tulostaLangat(lankaDao);
//        tulostaViesti(viestiDao);

//        AlueDao aluedao = daoManager.getAlueDao();
//        List<Alue> alueet = aluedao.findAll();
//        System.out.println(alueet);
//        
//        LankaDao lankadao = daoManager.getLankaDao();
//        List<Lanka> langat = lankadao.findAll();
//        System.out.println(langat);
//        

//    public static void tulostaKayttajat(KayttajaDao kayttajaDao) throws SQLException {
//        System.out.println("K채ytt채j채t:");
//        for (Kayttaja kayttaja : kayttajaDao.findAll()) {
//            System.out.println(kayttaja.getId());
//        }
//        System.out.println("");
//    }
//
//    public static void tulostaAlueet(AlueDao alueDao) throws SQLException {
//        System.out.println("Alueet:");
//        for (Alue alue : alueDao.findAll()) {
//            System.out.println(alue.getAluenimi() + " | " + alue.getAlueviestimaara());
//        }
//        System.out.println("");
//    }
//
//    public static void tulostaLangat(LankaDao lankaDao) throws SQLException {
//        System.out.println("Langat:");
//        for (Lanka lanka : lankaDao.findAll()) {
//            System.out.println(lanka.getAlue().getAluenimi() + " | " + lanka.getLankanimi() + " | " + lanka.getLankaviestimaara());
//        }
//        System.out.println("");
//    }
//
//    public static void tulostaViesti(ViestiDao viestiDao) throws SQLException {
//        System.out.println("Viestit:");
//        for (Viesti viesti : viestiDao.findAll()) {
//            if (viesti.getLanka().getLankanimi().equals("UCL finaali")) {
//                System.out.println(viesti.getId()
//                        + " | " + viesti.getLanka().getLankanimi()
//                        + " | " + viesti.getKayttaja().getId()
//                        + " | " + viesti.getSisalto()
//                        + " | " + viesti.getLahetysaika());
//            }
//        }
//        System.out.println("");
//    }


        /*
         * Alueen langat
         */
//        get("/alue/:id", (req, res) -> {
//            AlueDao alueDao = daoManager.getAlueDao();
//            LankaDao lankaDao = daoManager.getLankaDao();
//
//            HashMap map = new HashMap<>();
//            map.put("alue", alueDao.findOne(Integer.parseInt(req.params("id"))));
//            map.put("langat", lankaDao.findAllWithAlueId(Integer.parseInt(req.params("id"))));
//
//            return new ModelAndView(map, "alueTable");
//        }, new ThymeleafTemplateEngine());
        /*
         *
         * Alueen langat 10 kerrallaan
         */


            <!--
                    <ul class="messages">            
                        <li th:each="alue: ${alueet}">                
                            <a th:href="${'/alue/' + alue.id + '?sivu=0'}"><span th:text="${alue.aluenimi}"></span></a>
                            <span th:text="${alue.alueviestimaara}"></span>
                            <span th:text="${alue.viimeisinAika}"></span>        
        
                        </li>
                    </ul>
            -->


            <!--
            <table style ="width:95%">

                <tr>
                    <th>Nimimerkki</th>
                    <th>Viesti</th>
                    <th>L채hetysaika</th>
                </tr>
                <tr th:each="viesti: ${viestit}">
                    <td>
                        <a th:href="${'/kayttaja/' + viesti.kayttaja.id}">
                            <span th:text="${viesti.kayttaja.id}"></span>
                        </a>
                    </td>
                    <td th:text="${viesti.sisalto}"></td>
                    <td th:text="${viesti.lahetysaika}"></td>       
                </tr>
            </table>

            -->

            <!--
            <h1>
                <span th:text="${alue.aluenimi}"></span>
                <span> / </span>
                <span th:text="${lanka.lankanimi}"></span>
            </h1>
            -->

<a th:href="${'/alue/' + alue.id + '/' + lanka.id + '?sivu=' + edellinen}"><span th:text="${edellinen != null} ? 'edelliset'">edelliset viestit</span></a>
<a th:href="${'/alue/' + alue.id + '/' + lanka.id + '?sivu=' + seuraava}"><span th:text="${seuraava != null} ? 'seuraavat'">seuraavat viestit</span></a>

            <p class="right">
                <a th:href="${'/alue/' + alue.id + '?sivu=' + edellinen}"><span th:text="${edellinen != null} ? 'edelliset'">edelliset langat</span></a>
                <a th:href="${'/alue/' + alue.id + '?sivu=' + seuraava}"><span th:text="${seuraava != null} ? 'seuraavat'">seuraavat langat</span></a>
            </p>